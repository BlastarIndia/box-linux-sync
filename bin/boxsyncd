#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# This file is part of box-linux-sync.
#
# Copyright (C) 2012-2014 Vítor Brandão <vitor@noiselabs.org>
#
# box-linux-sync is free software; you can redistribute it  and/or modify it
# under the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.
#
# box-linux-sync is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with box-linux-sync; if not, see
# <http://www.gnu.org/licenses/>.

import platform
import signal
import sys

# This block ensures that ^C interrupts are handled quietly. We handle
# KeyboardInterrupt instead of installing a SIGINT handler, since
# exiting from signal handlers intermittently causes python to ignore
# the SystemExit exception with a message like this:
# Exception SystemExit: 130 in <function remove at 0x7fd2146c1320> ignored
try:
    def exithandler(signum, _frame):
        signal.signal(signal.SIGTERM, signal.SIG_IGN)
        sys.exit(128 + signum)

    signal.signal(signal.SIGTERM, exithandler)
    # Prevent "[Errno 32] Broken pipe" exceptions when
    # writing to a pipe.
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)

    def debug_signal(_signum, _frame):
        import pdb
        pdb.set_trace()

    if platform.python_implementation() == 'Jython':
        debug_signum = signal.SIGUSR2
    else:
        debug_signum = signal.SIGUSR1

    signal.signal(debug_signum, debug_signal)

    try:
        from noiselabs.boxsync.boxsyncd import main as boxsyncd_main
    except ImportError:
        from os import path as osp
        sys.path.insert(0, osp.join(osp.dirname(osp.dirname(osp.realpath(__file__))), 'src'))
        from noiselabs.boxsync.boxsyncd import main as boxsyncd_main

    if __name__ == "__main__":
        boxsyncd_main()

except KeyboardInterrupt:
        sys.stderr.write("\n\nExiting on signal %(signal)s\n" %
                {"signal": signal.SIGINT})
        sys.stderr.flush()
        sys.exit(128 + signal.SIGINT)